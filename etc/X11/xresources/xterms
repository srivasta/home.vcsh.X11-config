
!XTerm*VT100.baseTranslations: #override\n\
!       <Enter>:set-vt-font(d)\n\
!       <Leave>:set-vt-font(1)\n\
! XTerm*VT100.baseTranslations: #override\n\
!       <FocusIn>:set-vt-font(d)\n\
!       <FocusOut>:set-vt-font(1)\n\
!#I've figured out my problem getting bash to recognize Meta sequences'
!#in an xterm.
!#
!#I needed to add an extra translation to XTerm.
!#
!#It had "Meta <KeyPress>: insert-eight-bit()" in its default
!#translations, which didn't seem to do anything, but when I added'
!#"Mod1 <KeyPress>: insert-eight-bit()", things worked correctly.

! }}}
! {{{ "console" is a particular instance of class XTerm.

!       "console" is a particular instance of class XTerm.  If you start up
!       an xterm window with "xterm -name console", it will inherit default
!       settings both from XTerm above and the following "console" defaults.
!
console*font:                   fixed
console*boldFont:               6x13bold
console*menuFont:               6x13bold
console*VT100*geometry:         80x5+0+100
console*iconGeometry:           -0+0
console*iconName:               Console
console*scrollBar:              true
console*saveLines:              128
console*utmpInhibit:            true
#ifdef  COLOR
console*background:             black
console*foreground:             white
console*cursorColor:            cyan
#else
console*reverseViddeo:          off
#endif

! }}}
! {{{ Miscellaneous xterm with differemt names

ftpTerm*iconName:               FTP
ftpTerm*title:                  FTP
ftpTerm*utmpInhibit:            true
rloginTerm*iconName:            Remote Login
rloginTerm*title:               Remote Login
rloginTerm*utmpInhibit:         true
#ifdef COLOR
rloginTerm*background:          DarkGreen
rloginTerm*foreground:          white
#endif
telnetTerm*iconName:            Telnet
telnetTerm*title:               Telnet
telnetTerm*utmpInhibit:         true
telnetTerm*termName:            vt100
#ifdef COLOR
telnetTerm*background:          sienna
telnetTerm*foreground:          PaleGoldenrod
#endif
#ifdef PMAX
-local.vt100.geometry:          80x52-0-0
local-.vt100.geometry:          80x52+0-0
#else
-local.vt100.geometry:          80x55-0-0
local-.vt100.geometry:          80x55+0-0
#endif

! These are the 8 ANSI colors and their bright equivalents.  Depending on
! other resource settings, xterm may use the bright colors when displaying
! bold text (see the boldColors resource).
*VT100*color0:  black
*VT100*color1:  rgb:FF/33/33    
*VT100*color2:  rgb:66/FF/33    
*VT100*color3:  rgb:FF/EB/33    
*VT100*color4:  rgb:33/A3/FF    
*VT100*color5:  rgb:70/33/FF    
*VT100*color6:  rgb:33/FF/AD    
*VT100*color7:  cornsilk        
! The following are the "bright" colors
*VT100*color8:  DarkSlateGrey
*VT100*color9:  rgb:FF/99/99    
*VT100*color10: rgb:B3/FF/99    
*VT100*color11: rgb:FF/F5/99    
*VT100*color12: rgb:99/D1/FF    
*VT100*color13: rgb:B8/99/FF    
*VT100*color14: rgb:99/FF/D6    
*VT100*color15: rgb:FF/99/F0    

URxvt.color0:  black           
URxvt.color1:  rgb:FF/33/33    
URxvt.color2:  rgb:66/FF/33    
URxvt.color3:  rgb:FF/EB/33    
URxvt.color4:  rgb:33/A3/FF    
URxvt.color5:  rgb:70/33/FF    
URxvt.color6:  rgb:33/FF/AD    
URxvt.color7:  cornsilk        
! The following are the "bright" colors
URxvt.color8:  DarkSlateGrey   
URxvt.color9:  rgb:FF/99/99    
URxvt.color10: rgb:B3/FF/99    
URxvt.color11: rgb:FF/F5/99    
URxvt.color12: rgb:99/D1/FF    
URxvt.color13: rgb:B8/99/FF    
URxvt.color14: rgb:99/FF/D6    
URxvt.color15: rgb:FF/99/F0    

! black
! red3
! green3
! yellow3
! blue2
! magenta3
! cyan3
! gray90
! gray50
! red
! green
! yellow
! rgb:5c/5c/ff
! magenta
! cyan
! white

! }}}
! {{{ Keymaps

! Several sets of translations may be set up before xterm is run. These can
! be switched between at run time, allowing redefinitions suitable for
! several applications run under xterm.  Sets might be created for dbx, vi,
! mail or general shell commands. You could create tables for different
! combinations of hosts and servers.
! 
! These sets of translations are known as KEYMAPS (although in fact they
! may redefine all translations).
! 
! Rather than define function keys in the standard set of translations you
! can define translations in a named keymap. You will need however a
! translation defined in the main table to install the new keymap. To change
! to the keymap called dbxKeymap this could be:
! 
! XTerm*vt100.translations: #override\n\
!                 <KeyPress>F5: keymap(dbx)\n\
!                 <KeyPress>F6: keymap(vi)
! 
! 
! The dbx keymap could be defined as
! 
XTerm*vt100.dbxKeymap.translations: \
           <Key>F5: keymap(None) \n\
           <Key>F7: string("next") string(0x0d) \n\
           <Key>F8: string("step") string(0x0d) \n\
           <Key>F9: string("continue") string(0x0d) \n\
            Ctrl ~Meta <Btn3Down>: popup-menu(vtMenu)\n\
           <Key>F10: string("xprint ") insert-selection(PRIMARY, CUT_BUFFER0)
! 
! The entry ``<Key>F5: keymap(None)'' is important. It allows you to return
! to the standard keymap where keys may have other meanings defined.
! 
! Note that for the named keymaps we do not need either of the keywords
! `#override' or `#augment'.  In this case we automatically override the
! normal translation table.

! }}}

! }}}
